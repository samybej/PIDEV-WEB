<?php

namespace CovoiturageBundle\Repository;

/**
 * CovoiturageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CovoiturageRepository extends \Doctrine\ORM\EntityRepository
{
    public function rechercherCovoiturage($depart,$arrivee,$date)
    {
        $qb = $this->getEntityManager()->
            createQuery("select o,c from EntitiesBundle:Offre o JOIN o.idClient c Where o.depart=:dep and o.arrive=:arriv and o.date=:date")
            ->setParameters(array('dep' => $depart , 'arriv' => $arrivee, 'date' => $date));

        return $query = $qb->getResult();
    }

    public function recupererCovoiturage($client)
    {
        $qb = $this->getEntityManager()->
            createQuery("select o,t from EntitiesBundle:Type t JOIN t.idOffre o WHERE o.idOffreur= :idO")
            ->setParameter('idO', $client);

        return $query = $qb->getResult();
    }

    public function getStatistiques($date)
    {
      return intval($this->getEntityManager()
            ->createQuery("select COUNT(o) from EntitiesBundle:Offre o where o.date =:date")
            ->setParameter('date',$date)
            ->getSingleScalarResult());



    }

    public function CheckOffre($idOffreur,$date)
    {
        return $this->getEntityManager()
            ->createQuery("select o from EntitiesBundle:Offre o where o.idOffreur =:idO and o.date = :date ")
            ->setParameters(array('idO' => $idOffreur , 'date' => $date))
            ->getResult();
    }

    public function CheckInscription($idClient,$date)
    {
        return $this->getEntityManager()
            ->createQuery("select i from EntitiesBundle:InscriOffre i JOIN i.idOffre o where i.idClient =:idO and o.date = :date ")
            ->setParameters(array('idO' => $idClient , 'date' => $date))
            ->getResult();
    }

    public function CheckDoubleIncri($idClient,$idOffre)
    {
        $qb= $this->getEntityManager()
            ->createQuery("select i from EntitiesBundle:InscriOffre i where (i.idClient =:idO or i.idOffreur =:idO) and i.idOffre =:idO2")
            ->setParameters(array('idO' => $idClient , 'idO2' => $idOffre));

            $query = $qb->getResult();
            if ( count($query) > 0 )
            {
                return intval($qb->getSingleScalarResult());
            }
            return -1;
    }


}
